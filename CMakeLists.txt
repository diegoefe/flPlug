cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
project(flPlug)

set(FLP_AUTOR "Diego Florio")
set(FLP_DESCRIPTION "Type-safe FLTK callback adapter library")
set(FLP_MAJOR 0)
set(FLP_MINOR 1)
set(FLP_RELEASE 2)

set(CMAKE_BUILD_TYPE Release CACHE TYPE INTERNAL FORCE)

if(WIN32)
	string(SUBSTRING ${PROJECT_SOURCE_DIR} 0 2 CURRENT_DISC)
	set(BASE ${CURRENT_DISC}/devel)
	include_directories(${BASE}/heads)
	if(MINGW)
		set(fltk_name libfltk.a)
	else()
		set(fltk_name fltk_static.lib)
	endif()
	set(fltk_path ${BASE}/libs)
else()
	include_directories(/opt/fltk/include)
	set(fltk_path /opt/fltk/lib)
	set(fltk_name fltk)
endif()
find_library(FLTK_LIBRARIES ${fltk_name} PATHS ${fltk_path})
find_program(FLUID fluid PATHS ${fltk_path})
if(FLTK_LIBRARIES STREQUAL FLTK_LIBRARIES-NOTFOUND)
	message(FATAL_ERROR "FLTK not found!")
endif()
if(WIN32)
	set(FLTK_LIBRARIES "${FLTK_LIBRARIES};comctl32")
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
add_subdirectory(src)
add_subdirectory(doc)
add_subdirectory(test)

# CPack related
execute_process(COMMAND hostname OUTPUT_VARIABLE HOST)
string(TOLOWER ${HOST} HOST)
if(UNIX)
	if(HOST MATCHES diegoefe)
		set(FLP_ARQ "x86")
	else()
		set(FLP_ARQ "x86-64")
	endif()
elseif(APPLE)
	set(FLP_ARQ "mac")
else()
	set(FLP_ARQ "win32")
	if(MINGW)
		set(FLP_ARQ "${FLP_ARQ}-mingw")
	elseif(MSVC)
		set(FLP_ARQ "${FLP_ARQ}-msvc")
	else()
		set(FLP_ARQ "${FLP_ARQ}-other")
	endif()
endif()
set(CPACK_PACKAGE_NAME "${PROJECT_NAME}-${FLP_ARQ}")
set(CPACK_PACKAGE_VENDOR ${FLP_AUTHOR})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_NAME} - ${FLP_DESCRIPTION}")
set(CPACK_PACKAGE_VERSION "${FLP_MAJOR}.${FLP_MINOR}.${FLP_RELEASE}")
set(CPACK_SOURCE_PACKAGE_FILE_NAME "${PROJECT_NAME}-${CPACK_PACKAGE_VERSION}_source")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
set(CPACK_PACKAGE_VERSION_MAJOR ${FLP_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${FLP_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${FLP_RELEASE})
set(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}-${FLP_MAJOR}.${FLP_MINOR}")
set(CPACK_RESOURCE_FILE_LICENSE ${PROJECT_SOURCE_DIR}/doc/LICENSE.txt)
set(CPACK_COMPONENTS_ALL libraries headers examples documents)
set(CPACK_COMPONENT_LIBRARIES_DISPLAY_NAME "Libraries")
set(CPACK_COMPONENT_LIBRARIES_DESCRIPTION "Static libraries used to build programs with ${PROJECT_NAME}")
set(CPACK_COMPONENT_HEADERS_DISPLAY_NAME "C++ Headers")
set(CPACK_COMPONENT_HEADERS_DESCRIPTION "C/C++ header files for use with ${PROJECT_NAME}")
set(CPACK_COMPONENT_EXAMPLES_DISPLAY_NAME "Examples")
set(CPACK_COMPONENT_EXAMPLES_DESCRIPTION "An extremely useful application that makes use of ${PROJECT_NAME}")
set(CPACK_COMPONENT_DOCUMENTS_DISPLAY_NAME "Documentation")
set(CPACK_COMPONENT_DOCUMENTS_DESCRIPTION "Documentation for ${PROJECT_NAME}")
set(CPACK_COMPONENT_HEADERS_DEPENDS libraries)
set(CPACK_COMPONENT_LIBRARIES_DEPENDS headers)
set(CPACK_COMPONENT_EXAMPLES_DEPENDS libraries headers)
set(CPACK_SOURCE_IGNORE_FILES ".git*" "mkTar" "doc/TODO.txt" "doc/site/*")
include(CPack)
